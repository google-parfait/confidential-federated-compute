build --incompatible_enable_cc_toolchain_resolution
build --cxxopt=-std=c++17 --host_cxxopt=-std=c++17
build --action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1 --incompatible_strict_action_env
build --show_timestamps  # Useful for understanding build performance.
build --@rules_rust//rust/toolchain/channel=nightly
build --@rules_rust//rust/settings:rustfmt.toml=//:.rustfmt.toml
build --incompatible_merge_fixed_and_default_shell_env  # https://github.com/bazelbuild/rules_rust/issues/2665
build --output_filter='^//'  # Suppress warnings from external dependencies.
# Build TensorFlow with more optimizations to avoid linker OOM
build --per_file_copt=external/org_tensorflow/@-O2,-g0,-DNDEBUG
build --@rules_python//python/config_settings:bootstrap_impl=script  # https://github.com/bazelbuild/rules_python/issues/691
common --experimental_repo_remote_exec
common --noenable_bzlmod

build:asan --extra_toolchains=@llvm_toolchain//:cc-toolchain-x86_64-linux
build:asan --compilation_mode=dbg
build:asan --strip=never
# Using -gmlt gives file names and line numbers in the warning messages.
build:asan --copt=-gmlt
# To get reasonable performance, docs recommend adding -O1. See
# https://clang.llvm.org/docs/AddressSanitizer.html
build:asan --copt=-O1
build:asan --copt=-fsanitize=address
build:asan --copt=-fno-omit-frame-pointer
build:asan --linkopt=-fsanitize=address
build:asan --action_env=ASAN_OPTIONS=strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_leaks=1
# Our clang sysroot uses an old version of glibc without copy_file_range.
build:asan --per_file_copt=external/riegeli/@-DRIEGELI_DISABLE_COPY_FILE_RANGE
test:asan --test_tag_filters=-noasan

build:tsan --extra_toolchains=@llvm_toolchain//:cc-toolchain-x86_64-linux
build:tsan --compilation_mode=dbg
build:tsan --strip=never
build:tsan --copt=-fsanitize=thread
# Using -gmlt gives file names and line numbers in the warning messages.
build:tsan --copt=-gmlt
# To get reasonable performance, docs recommend adding -O1. See
# https://clang.llvm.org/docs/ThreadSanitizer.html
build:tsan --copt=-O1
build:tsan --copt=-fno-omit-frame-pointer
build:tsan --linkopt=-fsanitize=thread
build:tsan --action_env TSAN_OPTIONS=halt_on_error=1:second_deadlock_stack=1
# Our clang sysroot uses an old version of glibc without copy_file_range.
build:tsan --per_file_copt=external/riegeli/@-DRIEGELI_DISABLE_COPY_FILE_RANGE
test:tsan --test_tag_filters=-notsan

build:ubsan --extra_toolchains=@llvm_toolchain//:cc-toolchain-x86_64-linux
build:ubsan --compilation_mode=dbg
build:ubsan --strip never
# Using -gmlt gives file names and line numbers in the warning messages.
build:ubsan --copt=-gmlt
build:ubsan --copt=-fsanitize=undefined
build:ubsan --copt=-fno-omit-frame-pointer
build:ubsan --linkopt=-fsanitize=undefined
# Ensure the ubsan C++ runtime library is linked in, as suggested on
# https://github.com/bazelbuild/bazel/issues/11122#issuecomment-896613570 to
# work around linker errors.
build:ubsan --linkopt=-fsanitize-link-c++-runtime
build:ubsan --action_env UBSAN_OPTIONS=halt_on_error=1:print_stacktrace=1
# Our clang sysroot uses an old version of glibc without copy_file_range.
build:ubsan --per_file_copt=external/riegeli/@-DRIEGELI_DISABLE_COPY_FILE_RANGE
test:ubsan --test_tag_filters=-noubsan

# rules_rust 0.54.1 doesn't work with rust's experimental lld linking and clang
# (https://blog.rust-lang.org/2024/05/17/enabling-rust-lld-on-linux.html).
build:asan --@rules_rust//rust/settings:extra_rustc_flag=-Zlinker-features=-lld --@rules_rust//rust/settings:extra_exec_rustc_flag=-Zlinker-features=-lld
build:tsan --@rules_rust//rust/settings:extra_rustc_flag=-Zlinker-features=-lld --@rules_rust//rust/settings:extra_exec_rustc_flag=-Zlinker-features=-lld
build:ubsan --@rules_rust//rust/settings:extra_rustc_flag=-Zlinker-features=-lld --@rules_rust//rust/settings:extra_exec_rustc_flag=-Zlinker-features=-lld

# Settings for remote build execution.
build:cfc-remote --experimental_allow_tags_propagation
build:cfc-remote --define=EXECUTOR=remote
build:cfc-remote --remote_executor=grpcs://remotebuildexecution.googleapis.com
build:cfc-remote --remote_instance_name=projects/560162532548/instances/default
build:cfc-remote --noremote_upload_local_results
build:cfc-remote --google_default_credentials
build:cfc-remote --extra_execution_platforms=//:remote_platform
build:cfc-remote --host_platform=//:remote_platform
build:cfc-remote --platforms=//:remote_platform
build:cfc-remote --jobs=50

# Settings for uploading results to BES.
build:cfc-remote --bes_backend=buildeventservice-pa.googleapis.com
build:cfc-remote --bes_instance_name=560162532548
build:cfc-remote --bes_header=X-Goog-User-Project=560162532548
build:cfc-remote --bes_results_url=http://sponge2/
build:cfc-remote --grpc_keepalive_time=30s

# Enable CFC remote features when enabled for google-parfait.
common:parfait-remote --config=cfc-remote
