cargo-features = ["trim-paths"]

[workspace]
resolver = "2"
members = [
  "cfc_crypto",
  "examples/square_enclave_app",
  "examples/square_service",
  "examples/sum_enclave_app",
  "examples/sum_service",
  "ledger_enclave_app",
  "ledger_service",
  "pipeline_transforms",
  "replicated_ledger_enclave_app",
  "third_party/federated_compute",
  "tools/explain_fcp_attestation_record",
]
# All packages except for tools/explain_fcp_attestation_record are built for `no_std` environments
# (and generally for the "x86_64-unknown-none" target), and those are the packages we should build
# by default when you issue `cargo build` in the workspace root.
#
# We cannot currently support building both those packages *and* the non-`no_std`
# tools/explain_fcp_attestation_record package in a single `cargo build` invocation, as this will
# cause `cargo` to incorrectly unify the features of this non-`no_std` package's dependencies with
# those of the `no_std` packages' dependencies. This is documented at
# https://doc.rust-lang.org/nightly/cargo/reference/resolver.html#features. For example, it'll cause
# `anyhow` to be built with the `std` feature while targeting the `x86_64-unknown-none` target,
# which will fail since that target has no std library at all.
#
# This also means that while `cargo build` will work, `cargo build --workspace` will not, since that
# will again try to build all packages in a single invocation, and hence hit the same issue.
#
# Note: it is still useful to consider the tools/explain_fcp_attestation_record package part of this
# workspace, to help ensure that we only use a single version of common deps.
default-members = [
  "cfc_crypto",
  "examples/square_enclave_app",
  "examples/square_service",
  "examples/sum_enclave_app",
  "examples/sum_service",
  "ledger_enclave_app",
  "ledger_service",
  "pipeline_transforms",
  "replicated_ledger_enclave_app",
  "third_party/federated_compute",
]

[profile.release]
strip = "debuginfo" # Debug info is not always deterministic.
trim-paths = "all"  # Remove path prefixes outside the workspace root.

[workspace.dependencies]
micro_rpc = { git = "https://github.com/project-oak/oak", rev = "fee9e1e46751a01579f3a7d4df2f371cb409e2bb" }
micro_rpc_build = { git = "https://github.com/project-oak/oak", rev = "fee9e1e46751a01579f3a7d4df2f371cb409e2bb" }
oak_attestation = { git = "https://github.com/project-oak/oak", rev = "fee9e1e46751a01579f3a7d4df2f371cb409e2bb" }
oak_attestation_explain = { git = "https://github.com/project-oak/oak", rev = "fee9e1e46751a01579f3a7d4df2f371cb409e2bb" }
oak_attestation_verification = { git = "https://github.com/project-oak/oak", rev = "fee9e1e46751a01579f3a7d4df2f371cb409e2bb" }
oak_proto_rust = { git = "https://github.com/project-oak/oak", rev = "fee9e1e46751a01579f3a7d4df2f371cb409e2bb" }
oak_restricted_kernel_sdk = { git = "https://github.com/project-oak/oak", rev = "fee9e1e46751a01579f3a7d4df2f371cb409e2bb" }
