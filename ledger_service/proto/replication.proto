// Copyright 2024 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package replication;

import "fcp/protos/confidentialcompute/ledger.proto";
import "google/protobuf/timestamp.proto";

// This file contains proto messages internal to implementation of the
// replicated version of the Ledger service.

// Replication event generated in response to processing CreateKey request.
// This contains pending CreateKey results that haven't been committed yet
// and need to be replicated first. The goal to ensure that the public/private
// keypair is exactly the same on all replicas.
//
// This message needs to be in sync with CreateKeyRequest in
// https://github.com/google-parfait/federated-compute/blob/main/fcp/protos/confidentialcompute/ledger.proto
message CreateKeyEvent {
  // The time when the event was issued.
  google.protobuf.Timestamp event_time = 1;

  // The serialized bytes of the public key.
  bytes public_key = 2;

  // The serialized bytes of the private key.
  bytes private_key = 3;

  // The key expiration timestamp.
  google.protobuf.Timestamp expiration = 4;
}

// Range of records with an inclusive start and exclusive end.
message Range {
  // Beginning of the range, inclusive.
  bytes start = 1;
  // End of the range, exclusive.
  bytes end = 2;
}

// Replication event generated in response to processing AuthorizeAccess
// request.
//
// This message needs to be in sync with AuthorizeAccessRequest in
// https://github.com/google-parfait/federated-compute/blob/main/fcp/protos/confidentialcompute/ledger.proto
message AuthorizeAccessEvent {
  // The time when the event was issued.
  google.protobuf.Timestamp event_time = 1;

  // The serialized fcp.confidentialcompute.AccessPolicy the blob is subject to.
  // This must match the hash in the BlobHeader.
  bytes access_policy = 2;

  // Index of transform within the access policy.
  uint64 transform_index = 3;

  // The serialized fcp.confidentialcompute.BlobHeader of the blob being
  // accessed. Deprecated, use BlobMetadata.blob_header instead.
  bytes blob_header = 4 [deprecated = true];

  // Encapsulated HPKE secret key used (along with one of the Ledger's private
  // keys) to decrypt `encrypted_symmetric_key`. The encapsulated key will have
  // been produced as part of encrypting the blob's symmetric key using HPKE.
  // Deprecated, use BlobMetadata.encapsulated_key instead.
  bytes encapsulated_key = 5 [deprecated = true];

  // The blob's encrypted symmetric key, used to encrypt the blob data using
  // AEAD. This symmetric key should have been encrypted using the Ledger-owned
  // public key indicated in the blob header.
  // Deprecated, use BlobMetadata.encrypted_symmetric_key instead.
  bytes encrypted_symmetric_key = 6 [deprecated = true];

  // The public key to use to encrypt the response.
  bytes recipient_public_key = 7;

  // Nonce used by the recipient to ensure the same AuthorizeAccessResponse
  // cannot be replayed multiple times by an unsealed portion of the stack to
  // cause it to process the same data multiple times.
  // Deprecated, use BlobMetadata.recipient_nonce instead.
  bytes recipient_nonce = 8 [deprecated = true];

  // Optional. The range of blobs to authorize access to in batches.
  // If there is only a single blob, this field can be left unset.
  Range blob_range = 9;

  // The metadata of the blobs pertaining to the given range. This MUST be
  // provided for range-based batch authorization requests.
  repeated BlobMetadata blob_metadata = 10;

  message BlobMetadata {
    // The serialized fcp.confidentialcompute.BlobHeader of the blob being
    // accessed.
    bytes blob_header = 1;

    // Encapsulated HPKE secret key used (along with one of the Ledger's private
    // keys) to decrypt `encrypted_symmetric_key`. The encapsulated key will
    // have been produced as part of encrypting the blob's symmetric key using
    // HPKE.
    bytes encapsulated_key = 2;

    // The blob's encrypted symmetric key, used to encrypt the blob data using
    // AEAD. This symmetric key should have been encrypted using the
    // Ledger-owned public key indicated in the blob header.
    bytes encrypted_symmetric_key = 3;

    // Nonce used by the recipient to ensure the same AuthorizeAccessResponse
    // cannot be replayed multiple times by an unsealed portion of the stack to
    // cause it to process the same data multiple times.
    bytes recipient_nonce = 4;
  }
}

// Combined replication event - this is used to propagate the pending command
// through the replicated instances of the Ledger.
message LedgerEvent {
  oneof event {
    // Contains information about the new public/private keypair to be
    // applied to the state.
    CreateKeyEvent create_key = 1;
    // The same as in the LedgerRequest.
    fcp.confidentialcompute.DeleteKeyRequest delete_key = 2;
    // The same as in the LedgerRequest.
    AuthorizeAccessEvent authorize_access = 3;
    // The same as in the LedgerRequest.
    fcp.confidentialcompute.RevokeAccessRequest revoke_access = 4;
  }
}

// Snapshot of a blob budget.
message BlobBudgetSnapshot {
  // Blob ID.
  bytes blob_id = 1;

  // Per-transform budgets.
  repeated uint32 transform_access_budgets = 2;

  // Budgets that are shared between transforms.
  repeated uint32 shared_access_budgets = 3;
}

// Snapshot of the range budget.
message RangeBudgetSnapshot {
  // Beginning of all ranges, inclusive.
  repeated bytes start = 1;
  // End (exclusive) of all ranges corresponding to each `start` above.
  // This list must be the same length as `start`.
  repeated bytes end = 2;
  // Remaining budget for each range above. This list must be the same length as
  // `start` and `end`.
  repeated uint32 remaining_budget = 3;
  // Default budget that all entries not covered by any ranges above will use.
  uint32 default_budget = 4;
}

// Snapshot of state associated with a single access policy.
message PerPolicyBudgetSnapshot {
  // Access policy SHA-256 hash
  bytes access_policy_sha256 = 1;

  // Per-blob budgets. Deprected, use `transform_access_budgets` and
  // `shared_access_budgets` instead.
  repeated BlobBudgetSnapshot budgets = 2 [deprecated = true];

  // Per-transform budgets.
  repeated RangeBudgetSnapshot transform_access_budgets = 3;

  // Budgets that are shared between transforms.
  repeated RangeBudgetSnapshot shared_access_budgets = 4;
}

// Snapshot of budget state.
message BudgetSnapshot {
  // Budget data per access policy.
  repeated PerPolicyBudgetSnapshot per_policy_snapshots = 1;

  // Blob ids whose budgets have been consumed.
  repeated bytes consumed_budgets = 2;
}

// Snapshot of state associated with a single public/private keypair.
message PerKeySnapshot {
  // The serialized bytes of the public key.
  bytes public_key = 1;

  // The serialized bytes of the private key.
  bytes private_key = 2;

  // Expiration for this public/private keypair.
  google.protobuf.Timestamp expiration = 3;

  // All budgets related to the current public/private keypair.
  BudgetSnapshot budgets = 4;
}

// Snapshot message used to replicate the entire state of the Ledger (snapshot
// replication).
message LedgerSnapshot {
  // Last known current time at the moment when the snapshot was taken.
  google.protobuf.Timestamp current_time = 1;

  // Maps public key id to the public/private keypair specific data snapshot.
  repeated PerKeySnapshot per_key_snapshots = 2;
}
