# Copyright 2025 Google LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

module(
    name = "minimum_llama_cpp",
    version = "0.0.0",
    compatibility_level = 1,
)

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "toolchains_llvm", version = "1.4.0")
bazel_dep(name = "rules_python", version = "1.4.1")
bazel_dep(name = "rules_oci", version = "2.0.0")
bazel_dep(name = "rules_distroless", version = "0.5.1")
bazel_dep(name = "rules_pkg", version = "1.1.0")
bazel_dep(name = "rules_cuda")
archive_override(
    module_name = "rules_cuda",
    integrity = "sha256-1p+wq8uTeO1ZELmj03RqR9cKwpuK+idfkTrF4ZehfBw=",
    strip_prefix = "rules_cuda-76cb0a6afbe814d4da3cc50b9117c64272db4c44",
    url = "https://github.com/bazel-contrib/rules_cuda/archive/76cb0a6afbe814d4da3cc50b9117c64272db4c44.tar.gz",
)

bazel_dep(name = "abseil-cpp")
archive_override(
    module_name = "abseil-cpp",
    integrity = "sha256-O9tkKxAiIdzop0yHuPEcGZ/l8KXxfGGpSc6wb8QpLWo=",
    strip_prefix = "abseil-cpp-91cfa153fcb809672068b767fac7b0ac6ab321c2",
    url = "https://github.com/abseil/abseil-cpp/archive/91cfa153fcb809672068b767fac7b0ac6ab321c2.zip",
)

http_archive(
    name = "sysroot",
    sha256 = "f58c289b3ccb28895ad8ca408ac366e709037088e8b5c28aca18212adc18c31e",
    url = "https://github.com/google-parfait/confidential-federated-compute/releases/download/sysroot-20250618/sysroot.tar.xz",
)

# Set up python toolchain
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = False,
    ignore_root_user_error = True,
    python_version = "3.11",
)

http_archive(
    name = "llama_cpp",
    build_file = "//third_party/llama_cpp:llama_cpp.BUILD.bzl",
    integrity = "sha256-ia4rm4HjbOEnDEszG5kmJcEFOUNKFC9IUOtA1V1IsOo=",
    patches = ["//third_party/llama_cpp:llama_cpp.patch"],
    strip_prefix = "llama.cpp-6efcd65945a98cf6883cdd9de4c8ccd8c79d219a",
    url = "https://github.com/ggml-org/llama.cpp/archive/6efcd65945a98cf6883cdd9de4c8ccd8c79d219a.tar.gz",
)

# Set up cc toolchain
llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm", dev_dependency = True)
llvm.toolchain(
    name = "llvm_toolchain",
    # clang version lower than 19.1.0 requires libtinfo.so.5 when building CUDA
    llvm_version = "19.1.0",
    stdlib = {"linux-x86_64": "stdc++"},
)
llvm.sysroot(
    name = "llvm_toolchain",
    label = "@sysroot",
    targets = ["linux-x86_64"],
)
use_repo(llvm, "llvm_toolchain")

register_toolchains("@llvm_toolchain//:all")

# Set up hermetic CUDA toolchain
cuda = use_extension("@rules_cuda//cuda:extensions.bzl", "toolchain")

# cccl, cudart, nvcc are mandatory and needed for basic cuda support.
cuda.component(
    name = "cuda_cccl",
    component_name = "cccl",
    sha256 = "0740e9e01e4f15e17c5ab8d68bba4f8ec0eb6b84edccba4ac45112d2d2174e4b",
    strip_prefix = "cuda_cccl-linux-x86_64-12.8.90-archive",
    urls = ["https://developer.download.nvidia.com/compute/cuda/redist/cuda_cccl/linux-x86_64/cuda_cccl-linux-x86_64-12.8.90-archive.tar.xz"],
)
cuda.component(
    name = "cuda_cudart",
    component_name = "cudart",
    sha256 = "8d566b5fe745c46842dc16945cf36686227536decd2302c372be86da37faca68",
    strip_prefix = "cuda_cudart-linux-x86_64-12.8.90-archive",
    urls = ["https://developer.download.nvidia.com/compute/cuda/redist/cuda_cudart/linux-x86_64/cuda_cudart-linux-x86_64-12.8.90-archive.tar.xz"],
)
cuda.component(
    name = "cuda_nvcc",
    component_name = "nvcc",
    sha256 = "9961b3484b6b71314063709a4f9529654f96782ad39e72bf1e00f070db8210d3",
    strip_prefix = "cuda_nvcc-linux-x86_64-12.8.93-archive",
    urls = ["https://developer.download.nvidia.com/compute/cuda/redist/cuda_nvcc/linux-x86_64/cuda_nvcc-linux-x86_64-12.8.93-archive.tar.xz"],
)

# cublas is required by llama.cpp
cuda.component(
    name = "cuda_cublas",
    component_name = "cublas",
    sha256 = "21718957c2cf000bacd69d36c95708a2319199e39e056f8b4f0f68e3b9f323bb",
    strip_prefix = "libcublas-linux-x86_64-12.8.4.1-archive",
    urls = ["https://developer.download.nvidia.com/compute/cuda/redist/libcublas/linux-x86_64/libcublas-linux-x86_64-12.8.4.1-archive.tar.xz"],
)

# curand is needed for compiling cuda with clang
cuda.component(
    name = "cuda_curand",
    component_name = "curand",
    sha256 = "32a5ec30be446c1b7228d1bc502b2f029cc8b59a5e362c70d960754fa646778b",
    strip_prefix = "libcurand-linux-x86_64-10.3.9.90-archive",
    urls = ["https://developer.download.nvidia.com/compute/cuda/redist/libcurand/linux-x86_64/libcurand-linux-x86_64-10.3.9.90-archive.tar.xz"],
)
cuda.toolkit(
    name = "cuda",
    components_mapping = {
        "cccl": "@cuda_cccl",
        "cudart": "@cuda_cudart",
        "nvcc": "@cuda_nvcc",
        "cublas": "@cuda_cublas",
        "curand": "@cuda_curand",
    },
    version = "12.8.1",
)
use_repo(
    cuda,
    "cuda",
    "cuda_cccl",
    "cuda_cublas",
    "cuda_cudart",
    "cuda_curand",
    "cuda_nvcc",
)

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "distroless_cc_debian12_base",
    digest = "sha256:6714977f9f02632c31377650c15d89a7efaebf43bab0f37c712c30fc01edb973",
    image = "gcr.io/distroless/cc-debian12",
    platforms = ["linux/amd64"],
)
use_repo(oci, "distroless_cc_debian12_base")
