# Copyright 2025 Google LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

module(
    name = "minimum_jax",
    version = "0.0.1",
    compatibility_level = 1,
)

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

git_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "toolchains_llvm", version = "1.4.0")
bazel_dep(
    name = "rules_distroless",
    version = "0.5.1",
)
bazel_dep(
    name = "rules_oci",
    version = "2.2.6",
)
bazel_dep(
    name = "rules_python",
    version = "1.5.3",
)
bazel_dep(
    name = "rules_pkg",
    version = "1.1.0",
)
bazel_dep(
    name = "pybind11_bazel",
    version = "2.13.6",
)
bazel_dep(name = "abseil-cpp", version = "20250814.0", repo_name = "com_google_absl")
bazel_dep(name = "bazel_skylib", version = "1.4.1")
bazel_dep(name = "boringssl", version = "0.20250514.0")
bazel_dep(name = "grpc", version = "1.74.1", repo_name = "com_github_grpc_grpc")
bazel_dep(name = "rules_proto", version = "7.1.0")
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "googleapis", version = "0.0.0-20250730-f6801ce4", repo_name = "com_google_googleapis")
bazel_dep(name = "protobuf", version = "29.5", repo_name = "com_google_protobuf")
bazel_dep(name = "rules_license", version = "1.0.0")
bazel_dep(name = "flatbuffers", version = "25.2.10")

internal_configure = use_extension("@pybind11_bazel//:internal_configure.bzl", "internal_configure_extension")
use_repo(internal_configure, "pybind11")

bazel_dep(name = "oak")
archive_override(
    module_name = "oak",
    integrity = "sha256-ayZil41/X2ieLpdpJNvuHdRyeWNqVPtoEMCrDL23YjU=",
    strip_prefix = "oak-7884afbd383fc6a2acc1bc81b7ec0684a4d17d7a",
    url = "https://github.com/project-oak/oak/archive/7884afbd383fc6a2acc1bc81b7ec0684a4d17d7a.tar.gz",
)

bazel_dep(name = "confidential-federated-compute", version = "0.0.5")

http_archive(
    name = "federated-compute",
    integrity = "sha256-jHQ2VFmpHKJPXtyP3qYfHNDDE0CjHMZty8TXUgxfpGg=",
    patches = [
        "@confidential-federated-compute//third_party/federated_compute:libcppbor.patch",
        "@confidential-federated-compute//third_party/federated_compute:visibility.patch",
    ],
    strip_prefix = "federated-compute-76646c31268009ab6caa24e777d92e5536ccff0f",
    url = "https://github.com/google/federated-compute/archive/76646c31268009ab6caa24e777d92e5536ccff0f.tar.gz",
)

git_repository(
    name = "libcppbor",
    build_file = "@federated-compute//third_party:libcppbor.BUILD.bzl",
    commit = "20d2be8672d24bfb441d075f82cc317d17d601f8",
    patches = ["@confidential-federated-compute//third_party/libcppbor:libcppbor.patch"],
    remote = "https://android.googlesource.com/platform/external/libcppbor",
)

http_archive(
    name = "org_tensorflow_federated",
    integrity = "sha256-D0Osnecy+TOS3dkNIU0t2BDvBX82vzFXpHUqgeczDqQ=",
    patches = ["//third_party/org_tensorflow_federated:tff.patch"],
    strip_prefix = "tensorflow-federated-f3e41148a3ea633370edb67cabde0a62c9ee2403",
    url = "https://github.com/google-parfait/tensorflow-federated/archive/f3e41148a3ea633370edb67cabde0a62c9ee2403.tar.gz",
)

http_archive(
    name = "bazel_toolchains",
    sha256 = "294cdd859e57fcaf101d4301978c408c88683fbc46fbc1a3829da92afbea55fb",
    strip_prefix = "bazel-toolchains-8c717f8258cd5f6c7a45b97d974292755852b658",
    url = "https://github.com/bazelbuild/bazel-toolchains/archive/8c717f8258cd5f6c7a45b97d974292755852b658.tar.gz",
)

http_archive(
    name = "sysroot",
    sha256 = "f58c289b3ccb28895ad8ca408ac366e709037088e8b5c28aca18212adc18c31e",
    url = "https://github.com/google-parfait/confidential-federated-compute/releases/download/sysroot-20250618/sysroot.tar.xz",
)

stub_tf_proto_library = use_repo_rule("@confidential-federated-compute//:stub_tf_proto_library.bzl", "stub_tf_proto_library")

stub_tf_proto_library(
    name = "org_tensorflow",
)

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = False,
    ignore_root_user_error = True,
    python_version = "3.11",
)

# Set up cc toolchain
llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm", dev_dependency = True)
llvm.toolchain(
    name = "llvm_toolchain",
    # clang version lower than 19.1.0 requires libtinfo.so.5 when building CUDA
    llvm_version = "19.1.0",
    stdlib = {"linux-x86_64": "stdc++"},
)
llvm.sysroot(
    name = "llvm_toolchain",
    label = "@sysroot",
    targets = ["linux-x86_64"],
)
use_repo(llvm, "llvm_toolchain")

register_toolchains("@llvm_toolchain//:all")

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "python_3_11_slim_bookworm",
    digest = "sha256:838ff46ae6c481e85e369706fa3dea5166953824124735639f3c9f52af85f319",
    image = "python",
    platforms = ["linux/amd64"],
)
use_repo(oci, "python_3_11_slim_bookworm")

# Define the PIP deps we need from the requirements.in file.
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    python_version = "3.11",
    requirements_lock = "//:requirements_lock.txt",
)
use_repo(pip, "pip")
