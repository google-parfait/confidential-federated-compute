# Copyright 2025 Google LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

module(
    name = "minimum_jax",
    version = "0.0.0",
    compatibility_level = 1,
)

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "toolchains_llvm", version = "1.4.0")
bazel_dep(
    name = "rules_distroless",
    version = "0.5.1",
)
bazel_dep(
    name = "rules_oci",
    version = "2.2.6",
)
bazel_dep(
    name = "rules_python",
    version = "1.5.3",
)
bazel_dep(
    name = "rules_pkg",
    version = "1.1.0",
)
bazel_dep(
    name = "pybind11_bazel",
    version = "2.13.6",
)

internal_configure = use_extension("@pybind11_bazel//:internal_configure.bzl", "internal_configure_extension")
use_repo(internal_configure, "pybind11")

bazel_dep(name = "oak")
archive_override(
    module_name = "oak",
    integrity = "sha256-m1Dk4m7ar2CgPwzQ85qnQd50vG+7Is/mUQElEHjJIe8=",
    strip_prefix = "oak-af94fc2c4f8256be948c23af59c171b90dbc672c",
    url = "https://github.com/project-oak/oak/archive/af94fc2c4f8256be948c23af59c171b90dbc672c.tar.gz",
)

http_archive(
    name = "sysroot",
    sha256 = "f58c289b3ccb28895ad8ca408ac366e709037088e8b5c28aca18212adc18c31e",
    url = "https://github.com/google-parfait/confidential-federated-compute/releases/download/sysroot-20250618/sysroot.tar.xz",
)

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = False,
    ignore_root_user_error = True,
    python_version = "3.11",
)

# Set up cc toolchain
llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm", dev_dependency = True)
llvm.toolchain(
    name = "llvm_toolchain",
    # clang version lower than 19.1.0 requires libtinfo.so.5 when building CUDA
    llvm_version = "19.1.0",
    stdlib = {"linux-x86_64": "stdc++"},
)
llvm.sysroot(
    name = "llvm_toolchain",
    label = "@sysroot",
    targets = ["linux-x86_64"],
)
use_repo(llvm, "llvm_toolchain")

register_toolchains("@llvm_toolchain//:all")

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "python_3_11_slim_bookworm",
    digest = "sha256:838ff46ae6c481e85e369706fa3dea5166953824124735639f3c9f52af85f319",
    image = "python",
    platforms = ["linux/amd64"],
)
use_repo(oci, "python_3_11_slim_bookworm")

# Define the PIP deps we need from the requirements.in file.
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    python_version = "3.11",
    requirements_lock = "//:requirements_lock.txt",
)
use_repo(pip, "pip")
