// Copyright 2025 The Trusted Computations Platform Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// The storage service provides a simple key-value store that's backed by TCP.
// TODO: b/393146003 - Add support for expiration.

syntax = "proto3";

package confidential_federated_compute.kms;

import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";
import "proto/session/session.proto";

// A top-level request to the storage service.
message StorageRequest {
  // An arbitrary ID that allows this request to be matched with its
  // corresponding response.
  uint64 correlation_id = 1;
  oneof kind {
    ReadRequest read = 2;
    UpdateRequest update = 3;
  }
}

// A top-level response from the storage service. Unless an error occurs, the
// response type will match the request type.
message StorageResponse {
  // The corresponding request's correlation ID.
  uint64 correlation_id = 1;
  oneof kind {
    google.rpc.Status error = 2;
    ReadResponse read = 3;
    UpdateResponse update = 4;
  }
}

// A request to read entries from the storage service.
message ReadRequest {
  repeated Range ranges = 1;

  message Range {
    // The first key to retrieve. Keys must be 16 bytes.
    bytes start = 1;

    // The last key to retrieve (16 bytes). If unset, only `start` is retrieved.
    optional bytes end = 2;
  }
}

// The response to a ReadRequest.
message ReadResponse {
  // The storage service's notion of the current time.
  google.protobuf.Timestamp now = 1;

  // The requested entries. Any entries that do not exist are silently omitted.
  repeated Entry entries = 2;

  message Entry {
    // The entry's key (16 bytes).
    bytes key = 1;

    // The entry's value.
    bytes value = 2;
  }
}

// A request to modify the storage service's state.
message UpdateRequest {
  // The current time, used to remove expired entries. The storage service's
  // clock monotonically increasing, so a value in the past will have no effect.
  google.protobuf.Timestamp now = 1;

  // Zero or more updates to apply in the same transaction. The update only
  // succeeds if all updates can be applied.
  repeated Update updates = 2;

  message Update {
    // The key to update (16 bytes).
    bytes key = 1;
    // The desired value for the entry. If unset, the entry is removed.
    optional bytes value = 2;
    // TODO: b/393146003 - Add support for update preconditions.
  }
}

// The response to an UpdateRequest.
message UpdateResponse {}

//
// TCP Events
//

// The top-level event message.
message StorageEvent {
  // The ID of the Oak session, used to encrypt the response.
  bytes session_id = 1;

  // The request's correlation ID.
  uint64 correlation_id = 2;

  oneof kind {
    UpdateRequest update = 3;
  }
}

// A SessionResponse wrapper since the TCP Actor API expects application-level
// errors to be sent in the response message, not as an RPC error.
// TODO: b/393146003 - move this message to google-parfait/federated-compute.
message SessionResponseWithStatus {
  // The status of the response. If not OK, the response should be ignored.
  google.rpc.Status status = 1;

  // The session response.
  oak.session.v1.SessionResponse response = 2;
}
