// Copyright 2024 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#include "containers/crypto.h"

#include <string>

#include "containers/crypto_test_utils.h"
#include "fcp/base/monitoring.h"
#include "fcp/confidentialcompute/cose.h"
#include "fcp/confidentialcompute/crypto.h"
#include "fcp/protos/confidentialcompute/pipeline_transform.pb.h"
#include "gmock/gmock.h"
#include "google/protobuf/struct.pb.h"
#include "google/protobuf/util/message_differencer.h"
#include "grpcpp/support/status.h"
#include "gtest/gtest.h"
#include "proto/containers/orchestrator_crypto.pb.h"
#include "proto/containers/orchestrator_crypto_mock.grpc.pb.h"

namespace confidential_federated_compute {
namespace {

using ::fcp::confidential_compute::OkpCwt;
using ::fcp::confidentialcompute::Record;
using ::oak::containers::v1::MockOrchestratorCryptoStub;
using ::testing::_;
using ::testing::DoAll;
using ::testing::HasSubstr;
using ::testing::NiceMock;
using ::testing::Return;
using ::testing::SaveArg;
using ::testing::SetArgPointee;

TEST(CryptoTest, EncryptAndDecrypt) {
  std::string message = "some plaintext message";
  std::string reencryption_public_key = "reencryption_public_key";
  std::string ciphertext_associated_data = "ciphertext associated data";

  google::protobuf::Any config;
  NiceMock<MockOrchestratorCryptoStub> mock_crypto_stub;
  RecordDecryptor record_decryptor(config, mock_crypto_stub);

  absl::StatusOr<absl::string_view> recipient_public_key =
      record_decryptor.GetPublicKey();
  ASSERT_TRUE(recipient_public_key.ok()) << recipient_public_key.status();

  absl::StatusOr<std::string> nonce = record_decryptor.GenerateNonce();
  ASSERT_TRUE(nonce.ok()) << nonce.status();

  absl::StatusOr<Record> rewrapped_record =
      crypto_test_utils::CreateRewrappedRecord(
          message, ciphertext_associated_data, *recipient_public_key, *nonce,
          reencryption_public_key);
  ASSERT_TRUE(rewrapped_record.ok()) << rewrapped_record.status();

  absl::StatusOr<std::string> decrypt_result =
      record_decryptor.DecryptRecord(*rewrapped_record);
  ASSERT_TRUE(decrypt_result.ok()) << decrypt_result.status();
  ASSERT_EQ(*decrypt_result, message);
}

TEST(CryptoTest, EncryptAndDecryptWrongRecipient) {
  std::string message = "some plaintext message";
  std::string reencryption_public_key = "reencryption_public_key";
  std::string ciphertext_associated_data = "ciphertext associated data";

  google::protobuf::Any config;
  NiceMock<MockOrchestratorCryptoStub> mock_crypto_stub;
  RecordDecryptor record_decryptor(config, mock_crypto_stub);
  RecordDecryptor record_decryptor_other(config, mock_crypto_stub);

  // Use the public key from record_decryptor_other to rewrap the message.
  // record_decryptor will not be able to decrypt the record.
  absl::StatusOr<absl::string_view> recipient_public_key =
      record_decryptor_other.GetPublicKey();
  ASSERT_TRUE(recipient_public_key.ok()) << recipient_public_key.status();

  absl::StatusOr<std::string> nonce = record_decryptor.GenerateNonce();
  ASSERT_TRUE(nonce.ok()) << nonce.status();

  absl::StatusOr<Record> rewrapped_record =
      crypto_test_utils::CreateRewrappedRecord(
          message, ciphertext_associated_data, *recipient_public_key, *nonce,
          reencryption_public_key);
  ASSERT_TRUE(rewrapped_record.ok()) << rewrapped_record.status();

  absl::StatusOr<std::string> decrypt_result =
      record_decryptor.DecryptRecord(*rewrapped_record);
  ASSERT_FALSE(decrypt_result.ok());
  ASSERT_TRUE(absl::IsInvalidArgument(decrypt_result.status()));

  // record_decryptor_other should not be able to decrypt the record either,
  // since the nonce was generated by record_decryptor.
  absl::StatusOr<std::string> decrypt_result_other =
      record_decryptor_other.DecryptRecord(*rewrapped_record);
  ASSERT_FALSE(decrypt_result_other.ok());
  ASSERT_TRUE(absl::IsFailedPrecondition(decrypt_result_other.status()))
      << decrypt_result.status();
}

TEST(CryptoTest, DecryptUnencryptedData) {
  std::string message = "some plaintext message";
  google::protobuf::Any config;
  NiceMock<MockOrchestratorCryptoStub> mock_crypto_stub;
  RecordDecryptor record_decryptor(config, mock_crypto_stub);

  Record record;
  record.set_unencrypted_data(message);
  absl::StatusOr<std::string> decrypt_result =
      record_decryptor.DecryptRecord(record);
  ASSERT_TRUE(decrypt_result.ok()) << decrypt_result.status();
  ASSERT_EQ(*decrypt_result, message);
}

TEST(CryptoTest, DecryptRecordWithInvalidKind) {
  google::protobuf::Any config;
  NiceMock<MockOrchestratorCryptoStub> mock_crypto_stub;
  RecordDecryptor record_decryptor(config, mock_crypto_stub);
  Record record;
  absl::StatusOr<std::string> decrypt_result =
      record_decryptor.DecryptRecord(record);
  ASSERT_FALSE(decrypt_result.ok());
  ASSERT_TRUE(absl::IsInvalidArgument(decrypt_result.status()))
      << decrypt_result.status();
}

TEST(CryptoTest, DecryptRecordWithInvalidAssociatedData) {
  google::protobuf::Any config;
  NiceMock<MockOrchestratorCryptoStub> mock_crypto_stub;
  RecordDecryptor record_decryptor(config, mock_crypto_stub);
  Record record;
  record.mutable_hpke_plus_aead_data()->set_ciphertext("unused ciphertext");
  record.mutable_hpke_plus_aead_data()->set_encrypted_symmetric_key(
      "unused symmetric key");
  record.mutable_hpke_plus_aead_data()->set_encapsulated_public_key(
      "unused encapped key");
  // Setting the wrong kind of associated data will cause decryption to fail
  // early.
  record.mutable_hpke_plus_aead_data()
      ->mutable_ledger_symmetric_key_associated_data();
  absl::StatusOr<std::string> decrypt_result =
      record_decryptor.DecryptRecord(record);
  ASSERT_FALSE(decrypt_result.ok()) << decrypt_result.status();
  ASSERT_TRUE(absl::IsInvalidArgument(decrypt_result.status()))
      << decrypt_result.status();
  ASSERT_THAT(decrypt_result.status().message(),
              HasSubstr("Record to decrypt must contain "
                        "rewrapped_symmetric_key_associated_data"));
}

TEST(CryptoTest, DecryptTwiceFails) {
  std::string message = "some plaintext message";
  std::string reencryption_public_key = "reencryption_public_key";
  std::string ciphertext_associated_data = "ciphertext_associated_data";

  google::protobuf::Any config;
  NiceMock<MockOrchestratorCryptoStub> mock_crypto_stub;
  RecordDecryptor record_decryptor(config, mock_crypto_stub);

  absl::StatusOr<absl::string_view> recipient_public_key =
      record_decryptor.GetPublicKey();
  ASSERT_TRUE(recipient_public_key.ok()) << recipient_public_key.status();

  absl::StatusOr<std::string> nonce = record_decryptor.GenerateNonce();
  ASSERT_TRUE(nonce.ok()) << nonce.status();

  absl::StatusOr<Record> rewrapped_record =
      crypto_test_utils::CreateRewrappedRecord(
          message, ciphertext_associated_data, *recipient_public_key, *nonce,
          reencryption_public_key);
  ASSERT_TRUE(rewrapped_record.ok()) << rewrapped_record.status();

  absl::StatusOr<std::string> decrypt_result =
      record_decryptor.DecryptRecord(*rewrapped_record);
  ASSERT_TRUE(decrypt_result.ok()) << decrypt_result.status();
  ASSERT_EQ(*decrypt_result, message);

  // Decrypting again will not succeed because the nonce should have been
  // deleted.
  absl::StatusOr<std::string> decrypt_result_2 =
      record_decryptor.DecryptRecord(*rewrapped_record);
  ASSERT_FALSE(decrypt_result_2.ok());
  ASSERT_TRUE(absl::IsFailedPrecondition(decrypt_result_2.status()))
      << decrypt_result_2.status();
}

TEST(CryptoTest, GetPublicKey) {
  MockOrchestratorCryptoStub mock_crypto_stub;
  oak::containers::v1::SignRequest sign_request;
  oak::containers::v1::SignResponse sign_response;
  sign_response.mutable_signature()->set_signature("signature");
  EXPECT_CALL(mock_crypto_stub, Sign(_, _, _))
      .WillOnce(DoAll(SaveArg<1>(&sign_request),
                      SetArgPointee<2>(sign_response),
                      Return(grpc::Status::OK)));

  google::protobuf::Any config;
  google::protobuf::Struct config_properties;
  (*config_properties.mutable_fields())["test"].set_bool_value(true);
  RecordDecryptor record_decryptor(config, mock_crypto_stub, config_properties);

  absl::StatusOr<absl::string_view> public_key =
      record_decryptor.GetPublicKey();
  ASSERT_TRUE(public_key.ok()) << public_key.status();
  absl::StatusOr<OkpCwt> cwt = OkpCwt::Decode(*public_key);
  ASSERT_TRUE(cwt.ok()) << cwt.status();
  EXPECT_TRUE(google::protobuf::util::MessageDifferencer::Equals(
      cwt->config_properties, config_properties))
      << "Actual: " << cwt->config_properties.DebugString();

  absl::StatusOr<std::string> sig_structure =
      cwt->BuildSigStructureForSigning(/*aad=*/"");
  ASSERT_TRUE(sig_structure.ok()) << sig_structure.status();
  EXPECT_EQ(sign_request.message(), *sig_structure);
  EXPECT_EQ(cwt->signature, "signature");
}

TEST(CryptoTest, GetPublicKeySigningFails) {
  MockOrchestratorCryptoStub mock_crypto_stub;
  EXPECT_CALL(mock_crypto_stub, Sign(_, _, _))
      .WillOnce(Return(grpc::Status(grpc::StatusCode::INVALID_ARGUMENT, "")));
  google::protobuf::Any config;
  RecordDecryptor record_decryptor(config, mock_crypto_stub);

  EXPECT_EQ(record_decryptor.GetPublicKey().status().code(),
            absl::StatusCode::kInvalidArgument);
}

TEST(CryptoTest, GetPublicKeyTwice) {
  google::protobuf::Any config;
  NiceMock<MockOrchestratorCryptoStub> mock_crypto_stub;
  RecordDecryptor record_decryptor(config, mock_crypto_stub);

  absl::StatusOr<absl::string_view> public_key =
      record_decryptor.GetPublicKey();
  ASSERT_TRUE(public_key.ok()) << public_key.status();

  // Now call GetPublicKey again.
  // This will succeed and return the same public key.
  absl::StatusOr<absl::string_view> public_key_2 =
      record_decryptor.GetPublicKey();
  ASSERT_TRUE(public_key_2.ok()) << public_key_2.status();
  ASSERT_EQ(*public_key, *public_key_2);
}

}  // namespace
}  // namespace confidential_federated_compute
