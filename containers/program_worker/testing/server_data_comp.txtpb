# Generated by running the following in a TFF colab:
#
#   @tff.tensorflow.computation(np.int32)
#   def double(x):
#     return x * 2
#
#   @federated_language.federated_computation(
#       federated_language.FederatedType(np.int32, federated_language.SERVER)
#   )
#   def server_data_comp(x):
#     return federated_language.federated_map(double, x)
#
#   tff.framework.serialize_value(server_data_comp)
type {
  function {
    parameter {
      federated {
        placement {
          value {
            uri: "server"
          }
        }
        all_equal: true
        member {
          tensor {
            dtype: DT_INT32
          }
        }
      }
    }
    result {
      federated {
        placement {
          value {
            uri: "server"
          }
        }
        all_equal: true
        member {
          tensor {
            dtype: DT_INT32
          }
        }
      }
    }
  }
}
lambda {
  parameter_name: "server_data_comp_arg"
  result {
    type {
      federated {
        placement {
          value {
            uri: "server"
          }
        }
        all_equal: true
        member {
          tensor {
            dtype: DT_INT32
          }
        }
      }
    }
    block {
      local {
        name: "fc_server_data_comp_symbol_0"
        value {
          type {
            federated {
              placement {
                value {
                  uri: "server"
                }
              }
              all_equal: true
              member {
                tensor {
                  dtype: DT_INT32
                }
              }
            }
          }
          call {
            function {
              type {
                function {
                  parameter {
                    struct {
                      element {
                        value {
                          function {
                            parameter {
                              tensor {
                                dtype: DT_INT32
                              }
                            }
                            result {
                              tensor {
                                dtype: DT_INT32
                              }
                            }
                          }
                        }
                      }
                      element {
                        value {
                          federated {
                            placement {
                              value {
                                uri: "server"
                              }
                            }
                            all_equal: true
                            member {
                              tensor {
                                dtype: DT_INT32
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  result {
                    federated {
                      placement {
                        value {
                          uri: "server"
                        }
                      }
                      all_equal: true
                      member {
                        tensor {
                          dtype: DT_INT32
                        }
                      }
                    }
                  }
                }
              }
              intrinsic {
                uri: "federated_apply"
              }
            }
            argument {
              type {
                struct {
                  element {
                    value {
                      function {
                        parameter {
                          tensor {
                            dtype: DT_INT32
                          }
                        }
                        result {
                          tensor {
                            dtype: DT_INT32
                          }
                        }
                      }
                    }
                  }
                  element {
                    value {
                      federated {
                        placement {
                          value {
                            uri: "server"
                          }
                        }
                        all_equal: true
                        member {
                          tensor {
                            dtype: DT_INT32
                          }
                        }
                      }
                    }
                  }
                }
              }
              struct {
                element {
                  value {
                    type {
                      function {
                        parameter {
                          tensor {
                            dtype: DT_INT32
                          }
                        }
                        result {
                          tensor {
                            dtype: DT_INT32
                          }
                        }
                      }
                    }
                    tensorflow {
                      graph_def {
                        type_url: "type.googleapis.com/tensorflow.GraphDef"
                        value: "\n=\n\024session_token_tensor\022\013Placeholder*\013\n\005dtype\022\0020\007*\013\n\005shape\022\002:\000\n,\n\003arg\022\013Placeholder*\013\n\005dtype\022\0020\003*\013\n\005shape\022\002:\000\n/\n\005mul/y\022\005Const*\013\n\005dtype\022\0020\003*\022\n\005value\022\tB\007\010\003\022\000:\001\002\n\037\n\003mul\022\003Mul\032\003arg\032\005mul/y*\007\n\001T\022\0020\003\n\"\n\010Identity\022\010Identity\032\003mul*\007\n\001T\022\0020\003\"\003\010\321\020"
                      }
                      parameter {
                        tensor {
                          tensor_name: "arg:0"
                        }
                      }
                      result {
                        tensor {
                          tensor_name: "Identity:0"
                        }
                      }
                      session_token_tensor_name: "session_token_tensor:0"
                    }
                  }
                }
                element {
                  value {
                    type {
                      federated {
                        placement {
                          value {
                            uri: "server"
                          }
                        }
                        all_equal: true
                        member {
                          tensor {
                            dtype: DT_INT32
                          }
                        }
                      }
                    }
                    reference {
                      name: "server_data_comp_arg"
                    }
                  }
                }
              }
            }
          }
        }
      }
      result {
        type {
          federated {
            placement {
              value {
                uri: "server"
              }
            }
            all_equal: true
            member {
              tensor {
                dtype: DT_INT32
              }
            }
          }
        }
        reference {
          name: "fc_server_data_comp_symbol_0"
        }
      }
    }
  }
}