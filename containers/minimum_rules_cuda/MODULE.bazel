# Copyright 2025 Google LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

module(
    name = "minimum_cuda",
    version = "0.0.0",
    compatibility_level = 1,
)

bazel_dep(name = "protobuf", version = "27.0", repo_name = "com_google_protobuf")
bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "rules_python", version = "1.4.1")
bazel_dep(name = "toolchains_llvm", version = "1.4.0")
bazel_dep(name = "rules_oci", version = "2.0.0")
bazel_dep(name = "container_structure_test", version = "1.16.0")
bazel_dep(name = "rules_distroless", version = "0.5.1")
bazel_dep(name = "rules_pkg", version = "1.1.0")
bazel_dep(name = "rules_proto", version = "7.1.0")
bazel_dep(name = "grpc")
archive_override(
    module_name = "grpc",
    integrity = "sha256-jKr9abeMUUQQliq9MrF5gcyXz3LwmudjOVu1e4+goyA=",
    strip_prefix = "grpc-1.72.1",
    url = "https://github.com/grpc/grpc/archive/refs/tags/v1.72.1.tar.gz",
)

bazel_dep(name = "abseil-cpp")
archive_override(
    module_name = "abseil-cpp",
    integrity = "sha256-O9tkKxAiIdzop0yHuPEcGZ/l8KXxfGGpSc6wb8QpLWo=",
    strip_prefix = "abseil-cpp-91cfa153fcb809672068b767fac7b0ac6ab321c2",
    url = "https://github.com/abseil/abseil-cpp/archive/91cfa153fcb809672068b767fac7b0ac6ab321c2.zip",
)

bazel_dep(name = "oak")
archive_override(
    module_name = "oak",
    strip_prefix = "oak-af94fc2c4f8256be948c23af59c171b90dbc672c",
    url = "https://github.com/project-oak/oak/archive/af94fc2c4f8256be948c23af59c171b90dbc672c.tar.gz",
)

bazel_dep(name = "rules_cuda")
archive_override(
    module_name = "rules_cuda",
    integrity = "sha256-ZX6jQUzVnV0yFbP1avfheE8f8V30LEisBTI0UoU3vM4=",
    strip_prefix = "rules_cuda-bec68747dd9fa98d166c0a95cee2390847340748",
    url = "https://github.com/bazel-contrib/rules_cuda/archive/bec68747dd9fa98d166c0a95cee2390847340748.tar.gz",
)

# Set up python toolchain
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = False,
    ignore_root_user_error = True,
    python_version = "3.11",
)

# Set up cc toolchain
llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm", dev_dependency = True)
llvm.toolchain(
    name = "llvm_toolchain",
    llvm_version = "18.1.8",
    stdlib = {"": "stdc++"},  # Force linking libstdc++ which is what cuda does by default.
)
use_repo(llvm, "llvm_toolchain")

register_toolchains("@llvm_toolchain//:all")

# Set up cuda toolchain
# This is not hermetic yet, we'll need to wait for https://github.com/bazel-contrib/rules_cuda/issues/324#issuecomment-2682490634 to be merged.
# In the meantime, we need to use the dockerfile as our build environment.
cuda = use_extension("@rules_cuda//cuda:extensions.bzl", "toolchain")
cuda.toolkit(
    name = "cuda",
    toolkit_path = "",
)
use_repo(cuda, "cuda")

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "cuda_runtime",
    digest = "sha256:59377892150212ca133313a73db5dfd14e8635764ba24a947513c5fc903ddbda",
    image = "docker.io/nvidia/cuda:12.9.0-cudnn-runtime-ubuntu22.04",  # base image published by Nvidia which contains cuda runtime deps.
    platforms = ["linux/amd64"],
)
use_repo(oci, "cuda_runtime")
