---
source: tools/explain_fcp_attestation_record/tests/snapshot_tests.rs
expression: buf
---
========================================
===== LEDGER ATTESTATION EVIDENCE ======
========================================

Oak Restricted Kernel Stack in a AMD SEV-SNP TEE

_____ Root Layer _____

The attestation is rooted in an AMD SEV-SNP TEE.

Attestations identifying the firmware captured in the evidence can be found here:
https://search.sigstore.dev/?hash=04e9cf2132fd633c9ccdc74688b0ec9195cd6d95af33c6b168af07059f718db8

â“˜ The firmware attestation digest is the SHA2-256 hash of the SHA2-384 hash of the initial memory state taken by the AMD SoC. The original SHA2-384 hash of the initial memory is: SHA2-384:306c9215737ba0da4cc5d16b655b9c9d66fd17d20cba4722bc2c339b1b0b90a61dd1fe781c91fa7a1ef0da45d1195d52; it is listed as the 'initial_measurement' in the evidence of this layer.

The evidence describing this layer is outlined below.

sev_snp:
  current_tcb:
    boot_loader: 4
    fmc: 0
    microcode: 219
    snp: 24
    tee: 0
  debug: false
  hardware_id: 755d54c9d4bf9f0b0f9d0af81b5fc073f8937faf15190b497f11f503cbe676f153b26bc6e7091af265a4b77cad1201bc26c854edc519e89075d9300553eca067
  initial_measurement: 306c9215737ba0da4cc5d16b655b9c9d66fd17d20cba4722bc2c339b1b0b90a61dd1fe781c91fa7a1ef0da45d1195d52
  product: 1
  report_data: eb8c9464fc806ac5f819acfeb06b0d4989f162cb26132b46ab25ba6ed523016d0000000000000000000000000000000000000000000000000000000000000000
  reported_tcb:
    boot_loader: 4
    fmc: 0
    microcode: 219
    snp: 24
    tee: 0
  vmpl: 0


Note: binaries for this layer are generally provided by the Oak project (https://github.com/project-oak/oak).

_____ Kernel Layer _____

Attestations identifying the binaries captured in the evidence in this layer can be found as outlined below.
Kernel: https://search.sigstore.dev/?hash=3e7c371858f2bd9c032894694bd5bb4893f2403ce8a0bcf73c07af3ef6a35a15
Initial Ramdisk: https://search.sigstore.dev/?hash=66e7b9c7a249836bf9994afb331018165c45d7fa3ea82796022fa8d4d263c93e

The evidence describing the kernel layer is outlined below.

acpi:
  sha2_256: 9afd4108d3ba568a2e01862a3cb4864a107ec53fe73b099785ed2b6e631aae60
init_ram_fs:
  sha2_256: 66e7b9c7a249836bf9994afb331018165c45d7fa3ea82796022fa8d4d263c93e
kernel_image:
  sha2_256: 3e7c371858f2bd9c032894694bd5bb4893f2403ce8a0bcf73c07af3ef6a35a15
kernel_raw_cmd_line: console=ttyS0
kernel_setup_data:
  sha2_256: 4cd020820da663063f4185ca14a7e803cd7c9ca1483c64e836db840604b6fac1
memory_map:
  sha2_256: 3d534ce794902288c18f83a9930fb0897bd1b180f71ad12def2f74d3404f2132


Note: binaries for this layer are generally provided by the Oak project (https://github.com/project-oak/oak).

_____ Application Layer _____

The evidence describing the application is outlined below.

binary:
  sha2_256: 2e09169bdb55d909929191f9dd523c4a7fb50de01094a85ebdf6c698c9b7870c
config: {}


Note: this layer describes the "ledger" application binary, which is generally a build of the `ledger_enclave_app` in the https://github.com/google-parfait/confidential-federated-compute repository.


========================================
========== DATA ACCESS POLICY ==========
========================================

The data access policy allows 3 data transformations and defines 2 shared access budgets.

>>>>> Transform #0 <<<<<
Source blob ID: 0

Access budgets: the transform's access to its source blob is gated by *all* of the following access rules:
- limited access budget (at most 2 times): the transform may only access its source blob this many times.
- limited shared access budget #1 (at most 2 times): this and other transforms sharing this same budget may only access their source blobs this many times combined.

Application matcher for this transform:
- Tag: app2
- Binary configuration restrictions:
  StructMatcher { fields: [FieldMatcher { path: "field_a", matcher: Some(ValueMatcher { kind: Some(NumberValue(NumberMatcher { kind: Some(Eq(1234.0)) })) }) }] }
- Applications performing this transform must provide attestation evidence that can be verified with the following reference values:

Reference values for the Oak Restricted Kernel stack
_____ Root Layer _____

The attestation must be rooted in an AMD SEV-SNP TEE.

The reference values describing this layer are printed below.

amd_sev:
  allow_debug: false
  milan:
    minimum:
      boot_loader: 1
      fmc: 0
      microcode: 4
      snp: 3
      tee: 2
  stage0:
    skip: {}


_____ Kernel Layer _____

The reference values describing this layer are printed below.

acpi:
  skip: {}
init_ram_fs:
  skip: {}
kernel:
  skip: {}
kernel_cmd_line_text:
  skip: {}
memory_map:
  skip: {}


_____ Application Layer _____

binary:
  skip: {}
configuration:
  skip: {}


Note: we don't print sigstore.dev links for the binary digests in this list of reference values. You can construct such links manually using the following template: https://search.sigstore.dev/?hash=${SHA2_256_HASH}. For the root layer stage0 binary the reference value will list the SHA2-384 hash, in which case the SHA2-256 hash of that SHA2-384 hash should be used for the sigstore.dev lookup.

>>>>> Transform #1 <<<<<
Source blob ID: 0

Access budgets: the transform's access to its source blob is gated by *all* of the following access rules:
- limited shared access budget #1 (at most 2 times): this and other transforms sharing this same budget may only access their source blobs this many times combined.

Application matcher for this transform:
- Tag: app2
- Binary configuration restrictions:
  StructMatcher { fields: [FieldMatcher { path: "field_b", matcher: Some(ValueMatcher { kind: Some(NumberValue(NumberMatcher { kind: Some(Eq(5678.0)) })) }) }] }
- Applications performing this transform must provide attestation evidence that can be verified with the following reference values:

Reference values for the Oak Restricted Kernel stack
_____ Root Layer _____

The attestation must be rooted in an AMD SEV-SNP TEE.

The reference values describing this layer are printed below.

amd_sev:
  allow_debug: false
  milan:
    minimum:
      boot_loader: 1
      fmc: 0
      microcode: 4
      snp: 3
      tee: 2
  stage0:
    skip: {}


_____ Kernel Layer _____

The reference values describing this layer are printed below.

acpi:
  skip: {}
init_ram_fs:
  skip: {}
kernel:
  skip: {}
kernel_cmd_line_text:
  skip: {}
memory_map:
  skip: {}


_____ Application Layer _____

binary:
  skip: {}
configuration:
  skip: {}


Note: we don't print sigstore.dev links for the binary digests in this list of reference values. You can construct such links manually using the following template: https://search.sigstore.dev/?hash=${SHA2_256_HASH}. For the root layer stage0 binary the reference value will list the SHA2-384 hash, in which case the SHA2-256 hash of that SHA2-384 hash should be used for the sigstore.dev lookup.

>>>>> Transform #2 <<<<<
Source blob ID: 1

Access budgets: the transform's access to its source blob is gated by *all* of the following access rules:
- limited shared access budget #0 (at most 5 times): this and other transforms sharing this same budget may only access their source blobs this many times combined.

Application matcher for this transform:
- Tag: app3
- Any application can perform this transform (attestation evidence will not be verified).
