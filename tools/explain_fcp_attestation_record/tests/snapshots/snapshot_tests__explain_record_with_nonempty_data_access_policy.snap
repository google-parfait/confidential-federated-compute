---
source: tools/explain_fcp_attestation_record/tests/snapshot_tests.rs
expression: buf
---
========================================
===== LEDGER ATTESTATION EVIDENCE ======
========================================

Oak Restricted Kernel Stack in a AMD SEV-SNP TEE

_____ Root Layer _____

The attestation is rooted in an AMD SEV-SNP TEE.

Attestations identifying the firmware captured in the evidence can be found here:
https://search.sigstore.dev/?hash=a8c51290169976afc37e6e6d866107285b5f4711a9ce5389c05d9a5d297d68c5

â“˜ The firmware attestation digest is the SHA2-256 hash of the SHA2-384 hash of the initial memory state taken by the AMD SoC. The original SHA2-384 hash of the initial memory is: SHA2-384:571e632335e16997bdc312208d540b083518fe05d84b8954a6529a019a04229f25347fdaac1bc80418addc64a3d48704; it is listed as the 'initial_measurement' in the evidence of this layer.

The evidence describing this layer is outlined below.

sev_snp:
  current_tcb:
    boot_loader: 3
    fmc: 0
    microcode: 209
    snp: 22
    tee: 0
  debug: false
  hardware_id: c1f5c58f728e2eded313ee675ac982393169c9bbffe6e250c54d81fcea2dad556d314f3c62c16cb9ae3d22f68a747261835f220d3656d0e6b646e6b2f11252cf
  initial_measurement: 571e632335e16997bdc312208d540b083518fe05d84b8954a6529a019a04229f25347fdaac1bc80418addc64a3d48704
  product: 2
  report_data: f75ac8ac3bfd479a0f121c384d71b4c032867895db71d91d135710083fd780a10000000000000000000000000000000000000000000000000000000000000000
  reported_tcb:
    boot_loader: 3
    fmc: 0
    microcode: 209
    snp: 22
    tee: 0
  vmpl: 0


Note: binaries for this layer are generally provided by the Oak project (https://github.com/project-oak/oak).

_____ Kernel Layer _____

Attestations identifying the binaries captured in the evidence in this layer can be found as outlined below.
Kernel: https://search.sigstore.dev/?hash=4b1e70ad0ad326f3ee6f8f45f77358f0b8bb5df05321a5abc34c66022e27450b
Initial Ramdisk: https://search.sigstore.dev/?hash=51534334403d87176dc66406a07b5108d51f46a8534497c21f2769d1217c51b8

The evidence describing the kernel layer is outlined below.

acpi:
  sha2_256: dbaccae7bfbf006e2b8623a82f1a5fcda2ea0392233c26b18356b3bcfac231eb
init_ram_fs:
  sha2_256: 51534334403d87176dc66406a07b5108d51f46a8534497c21f2769d1217c51b8
kernel_image:
  sha2_256: 4b1e70ad0ad326f3ee6f8f45f77358f0b8bb5df05321a5abc34c66022e27450b
kernel_raw_cmd_line: console=ttyS0
kernel_setup_data:
  sha2_256: 4cd020820da663063f4185ca14a7e803cd7c9ca1483c64e836db840604b6fac1
memory_map:
  sha2_256: 807625f963ce93abe1f2d9965b5da03c66d476aec9756fded405ce5f41182b6f


Note: binaries for this layer are generally provided by the Oak project (https://github.com/project-oak/oak).

_____ Application Layer _____

The evidence describing the application is outlined below.

binary:
  sha2_256: 5d10d8013345814e07141c6a4c9297d37653239132749574a2a71483c413e9fe
config: {}


Note: this layer describes the "ledger" application binary, which is generally a build of the `ledger_enclave_app` in the https://github.com/google-parfait/confidential-federated-compute repository.


========================================
========== DATA ACCESS POLICY ==========
========================================

The data access policy allows 3 data transformations and defines 2 shared access budgets.

>>>>> Transform #0 <<<<<
Source blob ID: 0

Access budgets: the transform's access to its source blob is gated by *all* of the following access rules:
- limited access budget (at most 2 times): the transform may only access its source blob this many times.
- limited shared access budget #1 (at most 2 times): this and other transforms sharing this same budget may only access their source blobs this many times combined.

Application matcher for this transform:
- Tag: app2
- Binary configuration restrictions:
  StructMatcher { fields: [FieldMatcher { path: "field_a", matcher: Some(ValueMatcher { kind: Some(NumberValue(NumberMatcher { kind: Some(Eq(1234.0)) })) }) }] }
- Applications performing this transform must provide attestation evidence that can be verified with the following reference values:

Reference values for the Oak Restricted Kernel stack
_____ Root Layer _____

The attestation must be rooted in an AMD SEV-SNP TEE.

The reference values describing this layer are printed below.

amd_sev:
  allow_debug: false
  milan:
    minimum:
      boot_loader: 1
      fmc: 0
      microcode: 4
      snp: 3
      tee: 2
  stage0:
    skip: {}


_____ Kernel Layer _____

The reference values describing this layer are printed below.

acpi:
  skip: {}
init_ram_fs:
  skip: {}
kernel:
  skip: {}
kernel_cmd_line_text:
  skip: {}
memory_map:
  skip: {}


_____ Application Layer _____

binary:
  skip: {}
configuration:
  skip: {}


Note: we don't print sigstore.dev links for the binary digests in this list of reference values. You can construct such links manually using the following template: https://search.sigstore.dev/?hash=${SHA2_256_HASH}. For the root layer stage0 binary the reference value will list the SHA2-384 hash, in which case the SHA2-256 hash of that SHA2-384 hash should be used for the sigstore.dev lookup.

>>>>> Transform #1 <<<<<
Source blob ID: 0

Access budgets: the transform's access to its source blob is gated by *all* of the following access rules:
- limited shared access budget #1 (at most 2 times): this and other transforms sharing this same budget may only access their source blobs this many times combined.

Application matcher for this transform:
- Tag: app2
- Binary configuration restrictions:
  StructMatcher { fields: [FieldMatcher { path: "field_b", matcher: Some(ValueMatcher { kind: Some(NumberValue(NumberMatcher { kind: Some(Eq(5678.0)) })) }) }] }
- Applications performing this transform must provide attestation evidence that can be verified with the following reference values:

Reference values for the Oak Restricted Kernel stack
_____ Root Layer _____

The attestation must be rooted in an AMD SEV-SNP TEE.

The reference values describing this layer are printed below.

amd_sev:
  allow_debug: false
  milan:
    minimum:
      boot_loader: 1
      fmc: 0
      microcode: 4
      snp: 3
      tee: 2
  stage0:
    skip: {}


_____ Kernel Layer _____

The reference values describing this layer are printed below.

acpi:
  skip: {}
init_ram_fs:
  skip: {}
kernel:
  skip: {}
kernel_cmd_line_text:
  skip: {}
memory_map:
  skip: {}


_____ Application Layer _____

binary:
  skip: {}
configuration:
  skip: {}


Note: we don't print sigstore.dev links for the binary digests in this list of reference values. You can construct such links manually using the following template: https://search.sigstore.dev/?hash=${SHA2_256_HASH}. For the root layer stage0 binary the reference value will list the SHA2-384 hash, in which case the SHA2-256 hash of that SHA2-384 hash should be used for the sigstore.dev lookup.

>>>>> Transform #2 <<<<<
Source blob ID: 1

Access budgets: the transform's access to its source blob is gated by *all* of the following access rules:
- limited shared access budget #0 (at most 5 times): this and other transforms sharing this same budget may only access their source blobs this many times combined.

Application matcher for this transform:
- Tag: app3
- Any application can perform this transform (attestation evidence will not be verified).
