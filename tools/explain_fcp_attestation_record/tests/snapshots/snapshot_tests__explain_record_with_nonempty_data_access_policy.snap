---
source: tools/explain_fcp_attestation_record/tests/snapshot_tests.rs
assertion_line: 109
expression: buf
---
========================================
===== LEDGER ATTESTATION EVIDENCE ======
========================================

Oak Restricted Kernel Stack in a AMD SEV-SNP TEE

_____ Root Layer _____

The attestation is rooted in an AMD SEV-SNP TEE.

Attestations identifying the firmware captured in the evidence can be found here:
https://search.sigstore.dev/?hash=33d5453b09e16ed0d6deb7c9f076b66b92a1b472d89534034717143554f6746d

â“˜ The firmware attestation digest is the SHA2-256 hash of the SHA2-384 hash of the initial memory state taken by the AMD SoC. The original SHA2-384 hash of the initial memory is: SHA2-384:6c090e4594fd40ee186c90d43f7ad8d904838baa9643a4be1d9d4ff0fdd670a62565e2417660008e058cc2f2029eac8a; it is listed as the 'initial_measurement' in the evidence of this layer.

The evidence describing this layer is outlined below.

sev_snp:
  current_tcb:
    boot_loader: 3
    microcode: 209
    snp: 20
    tee: 0
  debug: false
  hardware_id: d137b92d3ea7907e6829d123513c2a250acfa5c9eecfc5759f79c574eaf61792c0692af3b9caa39ab4069a329e7f8152b3fa2e2fee2717b42cd263983244198f
  initial_measurement: 6c090e4594fd40ee186c90d43f7ad8d904838baa9643a4be1d9d4ff0fdd670a62565e2417660008e058cc2f2029eac8a
  report_data: 8ef5ac52c6101d73903859b9b242cc1a84ca096a1fc13b15abcfd2857b6ea0450000000000000000000000000000000000000000000000000000000000000000
  reported_tcb:
    boot_loader: 3
    microcode: 209
    snp: 20
    tee: 0
  vmpl: 0


Note: binaries for this layer are generally provided by the Oak project (https://github.com/project-oak/oak).

_____ Kernel Layer _____

Attestations identifying the binaries captured in the evidence in this layer can be found as outlined below.
Kernel: https://search.sigstore.dev/?hash=ec752c660481432f525f49d0be1521c7ea42ebbf2ce705aad2781a329e1001d8
Initial Ramdisk: https://search.sigstore.dev/?hash=daf79f24b5744340ac18c2b468e7e0a7915684c5dfda2450acfa7225bdc75bb8

The evidence describing the kernel layer is outlined below.

acpi:
  sha2_256: dbaccae7bfbf006e2b8623a82f1a5fcda2ea0392233c26b18356b3bcfac231eb
init_ram_fs:
  sha2_256: daf79f24b5744340ac18c2b468e7e0a7915684c5dfda2450acfa7225bdc75bb8
kernel_cmd_line:
  sha2_256: 2b98586d9905a605c295d77c61e8cfd2027ae5b8a04eefa9018436f6ad114297
kernel_image:
  sha2_256: ec752c660481432f525f49d0be1521c7ea42ebbf2ce705aad2781a329e1001d8
kernel_raw_cmd_line: console=ttyS0
kernel_setup_data:
  sha2_256: 4cd020820da663063f4185ca14a7e803cd7c9ca1483c64e836db840604b6fac1
memory_map:
  sha2_256: 807625f963ce93abe1f2d9965b5da03c66d476aec9756fded405ce5f41182b6f


Note: binaries for this layer are generally provided by the Oak project (https://github.com/project-oak/oak).

_____ Application Layer _____

The evidence describing the application is outlined below.

binary:
  sha2_256: 892137def97d26c6b054093a5757919189878732ce4ab111212729007b30c0b4
config: {}


Note: this layer describes the "ledger" application binary, which is generally a build of the `ledger_enclave_app` in the https://github.com/google-parfait/confidential-federated-compute repository.


========================================
========== DATA ACCESS POLICY ==========
========================================

The data access policy allows 3 data transformations and defines 2 shared access budgets.

>>>>> Transform #0 <<<<<
Source blob ID: 0
Destination blob ID: 1

Access budgets: the transform's access to its source blob is gated by *all* of the following access rules:
- limited access budget (at most 2 times): the transform may only access its source blob this many times.
- limited shared access budget #1 (at most 2 times): this and other transforms sharing this same budget may only access their source blobs this many times combined.

Application matcher for this transform:
- Tag: app2
- Binary configuration restrictions:
  StructMatcher { fields: [FieldMatcher { path: "field_a", matcher: Some(ValueMatcher { kind: Some(NumberValue(NumberMatcher { kind: Some(Eq(1234.0)) })) }) }] }
- Applications performing this transform must provide attestation evidence that can be verified with the following reference values:

Reference values for the Oak Restricted Kernel stack
_____ Root Layer _____

The attestation must be rooted in an AMD SEV-SNP TEE.

The reference values describing this layer are printed below.

amd_sev:
  allow_debug: false
  min_tcb_version:
    boot_loader: 1
    microcode: 4
    snp: 3
    tee: 2
  stage0:
    skip: {}


_____ Kernel Layer _____

The reference values describing this layer are printed below.

acpi:
  skip: {}
init_ram_fs:
  skip: {}
kernel:
  skip: {}
kernel_cmd_line_text:
  skip: {}
memory_map:
  skip: {}


_____ Application Layer _____

binary:
  skip: {}
configuration:
  skip: {}


Note: we don't print sigstore.dev links for the binary digests in this list of reference values. You can construct such links manually using the following template: https://search.sigstore.dev/?hash=${SHA2_256_HASH}. For the root layer stage0 binary the reference value will list the SHA2-384 hash, in which case the SHA2-256 hash of that SHA2-384 hash should be used for the sigstore.dev lookup.

>>>>> Transform #1 <<<<<
Source blob ID: 0
Destination blob ID: N/A (terminal transform)

Access budgets: the transform's access to its source blob is gated by *all* of the following access rules:
- limited shared access budget #1 (at most 2 times): this and other transforms sharing this same budget may only access their source blobs this many times combined.

Application matcher for this transform:
- Tag: app2
- Binary configuration restrictions:
  StructMatcher { fields: [FieldMatcher { path: "field_b", matcher: Some(ValueMatcher { kind: Some(NumberValue(NumberMatcher { kind: Some(Eq(5678.0)) })) }) }] }
- Applications performing this transform must provide attestation evidence that can be verified with the following reference values:

Reference values for the Oak Restricted Kernel stack
_____ Root Layer _____

The attestation must be rooted in an AMD SEV-SNP TEE.

The reference values describing this layer are printed below.

amd_sev:
  allow_debug: false
  min_tcb_version:
    boot_loader: 1
    microcode: 4
    snp: 3
    tee: 2
  stage0:
    skip: {}


_____ Kernel Layer _____

The reference values describing this layer are printed below.

acpi:
  skip: {}
init_ram_fs:
  skip: {}
kernel:
  skip: {}
kernel_cmd_line_text:
  skip: {}
memory_map:
  skip: {}


_____ Application Layer _____

binary:
  skip: {}
configuration:
  skip: {}


Note: we don't print sigstore.dev links for the binary digests in this list of reference values. You can construct such links manually using the following template: https://search.sigstore.dev/?hash=${SHA2_256_HASH}. For the root layer stage0 binary the reference value will list the SHA2-384 hash, in which case the SHA2-256 hash of that SHA2-384 hash should be used for the sigstore.dev lookup.

>>>>> Transform #2 <<<<<
Source blob ID: 1
Destination blob ID: N/A (terminal transform)

Access budgets: the transform's access to its source blob is gated by *all* of the following access rules:
- limited shared access budget #0 (at most 5 times): this and other transforms sharing this same budget may only access their source blobs this many times combined.

Application matcher for this transform:
- Tag: app3
- Any application can perform this transform (attestation evidence will not be verified).
