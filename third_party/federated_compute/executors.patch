diff --git fcp/confidentialcompute/composing_tee_executor.cc fcp/confidentialcompute/composing_tee_executor.cc
index a6cabb9..8947cd0 100644
--- fcp/confidentialcompute/composing_tee_executor.cc
+++ fcp/confidentialcompute/composing_tee_executor.cc
@@ -282,14 +282,6 @@ class ComposingTeeExecutor
       tensorflow_federated::v0::Value leaf_result_pb;
       FCP_RETURN_IF_ERROR(
           child->Materialize(leaf_result_handles[i].ref(), &leaf_result_pb));
-
-      if (!leaf_result_pb.has_computation() ||
-          !leaf_result_pb.computation().has_data()) {
-        return absl::InvalidArgumentError(
-            "Expected client child executor to return a data computation "
-            "value");
-      }
-
       leaf_result_vals.push_back(ExecutorValue(leaf_result_pb));
     }
     return leaf_result_vals;
@@ -355,13 +347,6 @@ class ComposingTeeExecutor
     tensorflow_federated::v0::Value root_result_pb;
     FCP_RETURN_IF_ERROR(
         server_executor_->Materialize(root_call_handle.ref(), &root_result_pb));
-
-    if (!root_result_pb.has_computation() ||
-        !root_result_pb.computation().has_data()) {
-      return absl::InvalidArgumentError(
-          "Expected server child executor to return a data computation "
-          "value");
-    }
     return ExecutorValue(std::move(root_result_pb));
   }
 
diff --git fcp/confidentialcompute/tee_executor.cc fcp/confidentialcompute/tee_executor.cc
index 1edfbcb..a4daf11 100644
--- fcp/confidentialcompute/tee_executor.cc
+++ fcp/confidentialcompute/tee_executor.cc
@@ -127,12 +127,6 @@ class TeeExecutor : public tensorflow_federated::ExecutorBase<ValueFuture> {
               tensorflow_federated::v0::Value result,
               lambda_runner_->ExecuteComp(fn_for_lambda_runner,
                                           arg_for_lambda_runner, num_clients_));
-
-          if (!result.has_computation() || !result.computation().has_data()) {
-            return absl::InternalError(
-                "Expected lambda runner to return a data computation value.");
-          }
-
           return ExecutorValue(result);
         },
         &thread_pool_);
