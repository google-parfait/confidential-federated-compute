# Remove use of dp_accounting. It does not seem possible to find a version of
# dp_accounting that is compatible with the rest of TFF and the other
# dependencies we are pulling in via pip (especially dm-tree==0.1.7 which is
# needed to avoid pybind issues in the program_executor_tee container). We do
# not expect to need to use the extract_dp_event_from_state function.

--- tensorflow_federated/python/aggregators/differential_privacy.py
+++ tensorflow_federated/python/aggregators/differential_privacy.py
@@ -20,7 +20,6 @@ from typing import Any, NamedTuple, Optional
 import warnings

 from absl import logging
-import dp_accounting
 import federated_language
 import tensorflow as tf
 import tensorflow_privacy as tfp
@@ -588,7 +587,7 @@ class DifferentiallyPrivateFactory(factory.UnweightedAggregationFactory):

 def extract_dp_event_from_state(
     state: DPAggregatorState,
-) -> dp_accounting.DpEvent:
+):
   """Extracts a DPEvent from a DP AggregationProcess' state.

   The intended use of this method is to call it on each state generated by a
@@ -611,14 +610,9 @@ def extract_dp_event_from_state(
     ExtractingDpEventFromInitialStateError: If the state is the one returned by
       initialize.
   """
-
-  if state.is_init_state:
-    raise ExtractingDpEventFromInitialStateError(
-        'State was generated by a call to process.initialize(), whose DPEvent '
-        'is a placeholder. extract_dp_event_from_state only accepts states '
-        'from calls to process.next().'
-    )
-  return dp_accounting.DpEvent.from_named_tuple(state.dp_event)
+  raise NotImplementedError(
+    'DPEvent extraction not implemented due to unavailable dp_accounting '
+    'dependency.')


 def _check_float_positive(value, label):
