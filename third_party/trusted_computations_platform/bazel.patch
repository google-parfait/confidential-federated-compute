--- /dev/null
+++ proto/BUILD
@@ -0,0 +1,39 @@
+load("@rules_rust//cargo:defs.bzl", "cargo_build_script")
+load("@rules_rust//rust:defs.bzl", "rust_library")
+
+cargo_build_script(
+    name = "build",
+    srcs = ["build.rs"],
+    build_script_env = {
+        "PROTOC": "$(execpath @com_google_protobuf//:protoc)",
+        "DIGEST_PROTO": "$(execpath @oak//proto:digest.proto)",
+    },
+    data = glob(["src/*.proto"]) + [
+        "@oak//proto:digest.proto",
+        "@oak//proto/attestation:endorsement.proto",
+        "@oak//proto/attestation:evidence.proto",
+        "@oak//proto/attestation:reference_value.proto",
+        "@oak//proto/attestation:tcb_version.proto",
+        "@oak//proto/crypto:crypto.proto",
+        "@oak//proto/session:messages.proto",
+        "@oak//proto/session:session.proto",
+    ],
+    tools = ["@com_google_protobuf//:protoc"],
+    deps = [
+        "@oak//micro_rpc_build",
+        "@oak//oak_proto_build_utils",
+    ],
+)
+
+rust_library(
+    name = "tcp_proto",
+    srcs = glob(["src/*.rs"]),
+    proc_macro_deps = ["@crates_index//:prost-derive"],
+    visibility = ["//visibility:public"],
+    deps = [
+        ":build",
+        "@crates_index//:prost",
+        "@oak//micro_rpc",
+        "@oak//oak_proto_rust",
+    ],
+)

--- proto/build.rs
+++ proto/build.rs
@@ -20,1 +20,1 @@
-        &["src", "../proto_stubs"],
+        &["src", std::env::var("DIGEST_PROTO").unwrap().strip_suffix("/proto/digest.proto").unwrap()],
@@ -45,2 +45,3 @@
+    oak_proto_build_utils::fix_prost_derives().unwrap();
     Ok(())
 }

--- /dev/null
+++ runtime/BUILD
@@ -0,0 +1,29 @@
+load("@rules_rust//rust:defs.bzl", "rust_library")
+
+rust_library(
+    name = "tcp_runtime",
+    srcs = glob(["src/**"]),
+    visibility = ["//visibility:public"],
+    deps = [
+        "//proto:tcp_proto",
+        "@crates_index//:anyhow",
+        "@crates_index//:hashbrown",
+        "@crates_index//:prost",
+        "@crates_index//:slog",
+        "@crates_index//:spin",
+        "@oak//micro_rpc",
+        "@oak//oak_attestation",
+        "@oak//oak_attestation_verification",
+        "@oak//oak_crypto",
+        "@oak//oak_proto_rust",
+        "@oak//oak_restricted_kernel_sdk",
+        "@oak//oak_session",
+        "@raft_rs//:raft",
+    ] + select({
+        "@platforms//os:linux": [
+            "@crates_index//:mockall",
+            "@crates_index//:slog-term",
+        ],
+        "//conditions:default": [],
+    }),
+)

--- runtime/src/driver.rs
+++ runtime/src/driver.rs
@@ -34,1 +34,1 @@
-use platform::{Application, Host, PalError};
+use crate::platform::{Application, Host, PalError};

--- runtime/src/service.rs
+++ runtime/src/service.rs
@@ -34,1 +34,1 @@
-use service::micro_rpc::Status;
+use micro_rpc::Status;

--- runtime/src/util.rs
+++ runtime/src/util.rs
@@ -19,1 +19,1 @@
-use raft::eraftpb::{
+use ::raft::eraftpb::{
